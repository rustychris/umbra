Crashing when adding the MapLayer.

Seg fault is down in QgsLegendLayer::updateIcon(), according
to gdb.

Upgrading to Lyon, 2.12, and it runs just fine.

It does show the editor tool pointer.

Clicking prints "Add", "Add" and gives a python error - stale calls to time.time()

--

Depending on the file format, need to either target a directory or a single file,
and call the corresponding qt dialog.

On removing plugin, cancel the callbacks, otherwise we get duplicate dialogs.
 - hmm - even on a fresh load of the plugin and QGIS, get 3 responses to the 
   browse button.


Fixed by skipping the auto-binding.

--

Next: 
 - loading multiple grids worked briefly, showed the edits just fine, but then the 
   edited grid disappeared. ???
   fresh qgis, no plugin reloads.  load one grid, load second grid.  first grid
    displays briefly, but then stops.
   all is fine before zooming at all...
   it's zooming which screws it up.


   - kill the_layer global
   - make sure repaint_freezes/queued are instance local
   - still doesn't work.
   - the second layer receives two calls to extent() both when it is unchecked and
     rechecked.  first layer only gets a call to extent() when it's checked.
   - calls to draw on only the second layer.

   - odd that when it goes to remove the layers, only one of them is recognized as an
     umbra layer.  the other is a 'qgis._core.QgsPluginLayer' 

   - my_repaint appears to be called only on the last layer loaded.
   - so as soon as a new layer is added, the previous one seems to lose it's identity
     as an umbra_layer.
   - opening python console causes both layers to lose their identities.

   - any chance that having unique names would help this out?  or some other
     
   - this is either a QGIS bug, or common misuse.  The openlayers plugin has this same
     issue.  Openlayers issue 10930 says this has been fixed since version 1.3.4 of
     the plugin.  Submitted update to that issue.

     does this occur just with plugin layers of the same type?  
     with any plugin layer? can add an open streetmap layer, and it seems fine.
     can load two open streetmap layers, and the first will disappear, but the grid 
       is still fine.
     with any layer at all?
     what if the UmbraLayer class wasn't shared between layers?
       no help.

 - dealing with cells!
    * display cell centers
    * delete cell by right-click on cell center
    * add cell with clean click in middle of polygon (<7 sides)


--

Proof of concept of using memory layers to handle the display - so we get
the usual styling and manipulation of those layers?

Try it out just via GUI:

new project
create memory layer - points
>>> layer=iface.mapCanvas().currentLayer()

>>> geom = QgsGeometry.fromPoint(QgsPoint(111,222))
>>> caps = layer.dataProvider().capabilities()
>>> feat = QgsFeature()
>>> feat.setGeometry(geom)

that worked!

--

After a long period of development outside of a proper plugin, it's time
to roll that back into a plugin to get access to more GUI elements.

ODD, but okay:
 - on OSX, seems that Ctrl-click is being interpreted as a non-left button
   click. Ah - Command-click appears as control-click
 - for some reason, to get the logs to work, have to open the python console
   and then reload the plugin.


PROBLEM:
 - some funkiness with releasing some of the callbacks.  Need to think through
   the difference between removing the dockwidget, deleting a single layer, and
   deleting all of the layers.

 probably closing the dockwidget should do nothing.
 for that matter, should be able to delete the node layer and keep on editing.

 if it's possible to watch for deletion of the group?  but there is still some trickiness
   to multiple deletes at one time.

 Lay out the various destructor paths:
   Umbra::onClosePlugin -- currently Umbra::dockwidget_show(), when creating the dockwidgert,
     connects closingPlugin to Umbra::onClosePlugin.  That's probably a bad idea.
     the handler here disconnects the currentLayerChanged signal, but doesn't try to
     remove layers.

   Umbra::unload -- I think this is for reloading the plugin. it tears down menus,
     and tries to remove any layers that are still around.  probably this should take
     care of removing any other signal connections, too.
     


change UmbraLayer to manage an arbitrary set of actual layers.

For a managed layer, it needs...
 a log object
   - can copy or reference UmbraLayer.log
 the grid, which it may add fields to, and/or register some callbacks
   - i.e. factor out extend_grid()
   - factor out install_edge_quality, update_edge_quality
     edge_quality becomes a field managed by the edge layer
 have to come up with a way to decouple the different parts of
   modify_node.  currently, this pushes geometry changes to all of
   the layers.  ways to do this
    a. each layer listens for the on_modify_node signals
    b. UnstructuredGrid gets new signals, on_edge_geometry_changed
       on_cell_geometry_changed, which would come out of on_node_geometry
       changed.


edge quality might be a bit tricky - it relies on having proper cell
centers, which are currently calculated by the cell layer.  fixing
this in UnstructuredGrid might be the best approach.

simple display is now working, but..
 - closing the dock widget crashes all of qgis.
   need to get logging working to debug this.
 
 - logging fixed, but the crash seems not to happen on linux.


  last messages when removing dockwidget:
  
2016-08-20 10:34:41,775 - umbra - INFO - on layer changed
2016-08-20 10:34:41,775 - umbra - INFO - Checking for layers in <Umbra.umbra_layer.UmbraLayer object at 0x12dbd78d0>
2016-08-20 10:34:41,776 - umbra - INFO - Checking for layers in <Umbra.umbra_layer.UmbraLayer object at 0x12dbd78d0>
2016-08-20 10:34:45,499 - umbra - INFO - ** cleaning up dockwidget
 <self.dockwidget was set to None here>
2016-08-20 10:34:45,499 - umbra - INFO - disconnected

A: if we don't listen to closingDockWidget at all - does that avoid the crash?
   yes.
Maybe for now, best to just skip any of that closeEvent stuff.  The use case
there is not clear anymore, since closing the dock widget no longer closes
down umbra.



NEXT:
 - selecting the group is not enough to figure out active gridlayer.
   because selecting a group means that canvas.currentLayer returns None
   maybe we need to talk to the legend?
   Hmm - no clear path forward on this - for now, be sure it doesn't
   cause crash, but don't bend over backwards to handle it.
   
 - undo
    The Qt way is through PyQt4.QtGui.QUndoCommand
    Each layer has an undoStack().
    QGIS toggles the availability of undo based on which layer is selected.
    undoStack.push() does that.
    command objects have undo() and redo().
    
    http://www.informit.com/articles/article.aspx?p=1187104&seqNum=3

 Adding to the clayer undo stack is fine, redo() gets called, ustack.canUndo()
 now returns True, but the GUI Undo option does not get set.

 Is it necessary to use QGIS::QgsVectorLayerUndoCommand, instead of just QUndoCommand?

 hmm - there is vectorLayer.startEditing(), after which vectorLayer.editBuffer()
 will give us a VectorLayerEditBuffer()

also an endEditCommand() member function
 ah - issuing a startEditing() worked, after which the Undo menu was active, and
  clicking Undo did in fact call the previously setup undo action.

 for better or worse, entering edit mode also changes the rendering of the cells,
 adding vertex markers.

  (a) is there a way to automatically enter/exit editing?
       startEditing() works...
       commitChanges() works.
       
  For my purposes, it may be easiest to use a QUndoStack, but wire in my own
  undo handling.

 1. Have the umbra tool intercept 'z' for undo. DONE

    Basic undo for moving nodes is working.
    Signals appear to propagate for toggling cells - that's nice.
    minor hiccup on a toggle cell, but other times it worked just fine.

    add/remove edge with undo is working.

    toggle cell is slow, but aside from that it work with undo.
    
    how about z and Z ? okay.

    moving a node can be redone with 'Z'
    
    redo on add edge works
    redo on toggling a cell does not always work..

    possible bug in delete_node_cascade() - had a case where it failed with an error
     about cells still referring to the node. happened again, after some attempts
     to toggle, undo toggle, redo toggle on some cells.

      - check on toggle cell:
        - does it remove node references to cells properly?
        - does it call the callbacks appropriately?
      It wasn't properly restoring the 'deleted' field on undeleting cells.
      Also changed to updating the cell center index instead of rebuilding on every add or delete.
         => much faster now
         => undo/redo at least paints and unpaints the cells.
         => now fixed
         
   
 - saving grids
   * doesn't handle path selection very well
   * save should remember previously used path
   * not graceful when given path doesn't exist
   * doesn't know that SUNTANS can't write quads (at this time)
   * untrim doesn't understand pentagons

 - after a bit of editing, got into an invalid state where the deletion mark on 
   some cells was off.  not clear exactly what was going on.  saved in sun_quads3.pkl



 - on OSX, the double-tap for delete can be confused with the start of a
   two-finger drag for zooming.  This is what causes the freak loss of elements.
 
 - understand feature selections - for starters, for deleting a group of nodes/edges/cells
   - do we get Delete key events? yes - although QGIS tries to handle it, too.

 - option to load multiple grids and merge them
   - probably requires a dialog, options for things like the tolerance for merging nodes

 - maybe a dockwidget option to show some grid stats?
 - access to more fields
   - this is also key to being able to toggle nodes to fixed, sliding, etc.
   
 - option to change maxnodes on the fly?
 - are any of the optimization approaches ready?  From Ed's comments, sounds like
   Janet uses an incremental construction - each pass pushing all of the nodes a bit
   closer to something like an orthogonal grid.

 - port tom to unstructured_grid

-----

2017-03-02

Unstable...

How to show dynamic edge/cell quality metrics?
 - edges and cells both watch for nodes moving.
 - some metrics are edge-centered, though depend on the geometry of cells
 - some metrics are cell-centered.
 - cells have some additional state, i.e. cell center, which might be cached.
   so we'd rather not do too much in an edge callback, since it may happen before
   the cell callback, and would be operating on bad information.
 - the cell callback currently recalculates cell centers


Putting all of the work in the cell layer would be one approach.
The parent UmbraLayer might need to coordinate the choice of metrics.

 - and after some mucking around, adding an edge crashed qgis once,
   later on, edges were okay but adding a cell crashed it.
   might be fixed with new, more diligent handling of fields.

 - edge quality should use a signed distance. i think this might be done now.
 - edits have gotten pretty slow.
   Q: does triggerRepaint() act synchronously?  Do multiple calls to it slow things down?
   A: asynchronous - multiple calls don't make any difference - 100 calls still had elapsed time
      <1ms.
   Q: Are there API hooks which might freeze the display while things update?
     SuppressOn / Off
     beginEditCommand, commitChanges
     draw()
     drawingProgress()
     geometryChanged()
     repaintRequested()
     updateField()
     updateFeature()

    Seems like the display part may not be what is holding back the overall speed.
    
 - adding edges appears not to work?
   log shows that edges are being added..  it's related to the styling - with single style
   it does show up.
 - dfm isn't populating depth at cells.  but maybe it's just not in the nc files?

 - edge quality doesn't get updated when a new cell is created, and is initialized to 
   a value which suggests the edge is bad.
 - cell quality isn't initialized properly.

 - options for the orthogonalize - spinbutton to set how many iterations to run.
  => orthogNIters spinbox
   could also pick out selected features, and optimize all of them each iteration, as opposed
   to whatever is adjacent to the cursor.
   also key command to save file as is, under last name used.
   
 
  The ortho. stuff takes a while - should allow for drawing updates along
  the way.
  

--

Got an AssertionError at delete_cell - this was on toggle cell in a quad 
which had just been cleared of two tris, while trying to delete cell.
So toggle cell picked up an old cell, it seems.

Possible that the index was stale? apparently - renumbering let if proceed...

Reproduced a second time - clearing the tris by deleting the edge between them.

And maybe it's time to allow for saving some of the info into a qgis project?
 - QgsProject.instance().writeEntry(pluginName,setting,value)
 - QgsProject.instance().read{Entry,NumEntry,DoubleEntry,BoolEntry,ListEntry}(pluginName,setting)

 - there are signals on a project - writeMapLayer, writeProject, probably those are the 
   places to handle some special sauce.


   writeProject does get emitted on saving a project.
   as is, it writes the status of the layer tree out, things like 
      <layer-tree-layer expanded="1" checked="Qt::Unchecked" id="grid2_nodes20170321104720554" name="grid2-nodes">
        <customproperties/>
      </layer-tree-layer>
   later on some coordinate transforms:
      <layer_coordinate_transform destAuthId="EPSG:26910" srcAuthId="EPSG:26910" srcDatumTransform="-1" destDatumTransform="-1" layerid="grid2_nodes20170321104720554"/>
   Ordering of the layers...
   Legend information on the layers
   And the good stuff - 
  <projectlayers>
    <maplayer simplifyAlgorithm="0" minimumScale="0" maximumScale="1e+08" simplifyDrawingHints="1" readOnly="0" minLabelScale="0" maxLabelScale="1e+08" simplifyDrawingTol="1" geometry="Polygon" simplifyMaxScale="1" type="vector" hasScaleBasedVisibilityFlag="0" simplifyLocal="1" scaleBasedLabelVisibilityFlag="0">
      <extent>
        <xmin>490243</xmin>
        <ymin>4137175.77396776247769594</ymin>
        <xmax>609718.45893199532292783</xmax>
        <ymax>4232151</ymax>
      </extent>
      <id>grid2_cells20170321104713208</id>
      <datasource>memory?geometry=Polygon&amp;crs=EPSG:26910&amp;field=cell_id:(0,0)&amp;field=mark:(0,0)&amp;field=cell_quality:(0,0)</datasource>
      <keywordList>
        <value></value>
      </keywordList>
      <layername>grid2-cells</layername>

style info...

But as it is, on loading the project, the layers are created but of course Umbra has no 
knowledge of them.
http://spatialgalaxy.net/2015/03/13/faking-a-data-provider-with-python/

Somewhat relevant, but not really much useful beyond what I have now.
They follow the more standard editingStarted, Stopped, commited... geometryChanged
sort of signals.

Maybe the way to go is for the memory layers to show up just like they do now, but then
the plugin can save its own state, which would be the settings in the dialogs, and the
data necessary to load all of the current grids.  It just needs enough information to
load a grid, associate the existing memory layers, and populate them.


There is also the option of setting custom properties on the layers - 
layer.setCustomProperty("mytext","hello world") # write
txt=layer.customProperty("mytext","default value") # read


Progress - but some issues with reading and writing.
 1. As is, it writes GridCount into a separate block of xml than it writes
    the layers, and it seems that qgis only keeps the last block.
 2. Manually, I collapsed the two Umbra blocks, and it found the grid, but
    did not populate the layers.

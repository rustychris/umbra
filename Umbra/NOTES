Crashing when adding the MapLayer.

Seg fault is down in QgsLegendLayer::updateIcon(), according
to gdb.

Upgrading to Lyon, 2.12, and it runs just fine.

It does show the editor tool pointer.

Clicking prints "Add", "Add" and gives a python error - stale calls to time.time()

--

Depending on the file format, need to either target a directory or a single file,
and call the corresponding qt dialog.

On removing plugin, cancel the callbacks, otherwise we get duplicate dialogs.
 - hmm - even on a fresh load of the plugin and QGIS, get 3 responses to the 
   browse button.


Fixed by skipping the auto-binding.

--

Next: 
 - loading multiple grids worked briefly, showed the edits just fine, but then the 
   edited grid disappeared. ???
   fresh qgis, no plugin reloads.  load one grid, load second grid.  first grid
    displays briefly, but then stops.
   all is fine before zooming at all...
   it's zooming which screws it up.


   - kill the_layer global
   - make sure repaint_freezes/queued are instance local
   - still doesn't work.
   - the second layer receives two calls to extent() both when it is unchecked and
     rechecked.  first layer only gets a call to extent() when it's checked.
   - calls to draw on only the second layer.

   - odd that when it goes to remove the layers, only one of them is recognized as an
     umbra layer.  the other is a 'qgis._core.QgsPluginLayer' 

   - my_repaint appears to be called only on the last layer loaded.
   - so as soon as a new layer is added, the previous one seems to lose it's identity
     as an umbra_layer.
   - opening python console causes both layers to lose their identities.

   - any chance that having unique names would help this out?  or some other
     
   - this is either a QGIS bug, or common misuse.  The openlayers plugin has this same
     issue.  Openlayers issue 10930 says this has been fixed since version 1.3.4 of
     the plugin.  Submitted update to that issue.

     does this occur just with plugin layers of the same type?  
     with any plugin layer? can add an open streetmap layer, and it seems fine.
     can load two open streetmap layers, and the first will disappear, but the grid 
       is still fine.
     with any layer at all?
     what if the UmbraLayer class wasn't shared between layers?
       no help.

 - dealing with cells!
    * display cell centers
    * delete cell by right-click on cell center
    * add cell with clean click in middle of polygon (<7 sides)


--

Proof of concept of using memory layers to handle the display - so we get
the usual styling and manipulation of those layers?

Try it out just via GUI:

new project
create memory layer - points
>>> layer=iface.mapCanvas().currentLayer()

>>> geom = QgsGeometry.fromPoint(QgsPoint(111,222))
>>> caps = layer.dataProvider().capabilities()
>>> feat = QgsFeature()
>>> feat.setGeometry(geom)

that worked!

--

After a long period of development outside of a proper plugin, it's time
to roll that back into a plugin to get access to more GUI elements.

ODD, but okay:
 - on OSX, seems that Ctrl-click is being interpreted as a non-left button
   click. Ah - Command-click appears as control-click
 - for some reason, to get the logs to work, have to open the python console
   and then reload the plugin.


PROBLEM:
 - some funkiness with releasing some of the callbacks.  Need to think through
   the difference between removing the dockwidget, deleting a single layer, and
   deleting all of the layers.

 probably closing the dockwidget should do nothing.
 for that matter, should be able to delete the node layer and keep on editing.

 if it's possible to watch for deletion of the group?  but there is still some trickiness
   to multiple deletes at one time.

 Lay out the various destructor paths:
   Umbra::onClosePlugin -- currently Umbra::dockwidget_show(), when creating the dockwidgert,
     connects closingPlugin to Umbra::onClosePlugin.  That's probably a bad idea.
     the handler here disconnects the currentLayerChanged signal, but doesn't try to
     remove layers.

   Umbra::unload -- I think this is for reloading the plugin. it tears down menus,
     and tries to remove any layers that are still around.  probably this should take
     care of removing any other signal connections, too.
     


change UmbraLayer to manage an arbitrary set of actual layers.

For a managed layer, it needs...
 a log object
   - can copy or reference UmbraLayer.log
 the grid, which it may add fields to, and/or register some callbacks
   - i.e. factor out extend_grid()
   - factor out install_edge_quality, update_edge_quality
     edge_quality becomes a field managed by the edge layer
 have to come up with a way to decouple the different parts of
   modify_node.  currently, this pushes geometry changes to all of
   the layers.  ways to do this
    a. each layer listens for the on_modify_node signals
    b. UnstructuredGrid gets new signals, on_edge_geometry_changed
       on_cell_geometry_changed, which would come out of on_node_geometry
       changed.


edge quality might be a bit tricky - it relies on having proper cell
centers, which are currently calculated by the cell layer.  fixing
this in UnstructuredGrid might be the best approach.

simple display is now working, but..
 - closing the dock widget crashes all of qgis.
   need to get logging working to debug this.
 


  
     
   
 
 
